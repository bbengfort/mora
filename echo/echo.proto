syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.bengfort.Echo";
option java_outer_classname = "EchoProto";

package echo;

// Time preserves nanosecond latency measurements by using this custom time
// struct which should include either seconds or nanoseconds since the Unix
// epoch as unsigned int64. In Go, you can use time.Unix to parse this field.
message Time {
    int64 seconds = 1;
    int64 nanoseconds = 2;
}

// Node describes an echoing machine on the network, either the sender
// (the source) or the receiver (the target). This is distinct from mora.Node.
message Node {
    string name  = 1;
    string address  = 2;
    string dns  = 3;
}

// EchoRequest is used to measure latency and uptime as with a ping, but
// designed to be more application-layer specific for measuring system latency.
message EchoRequest {
    Node source = 1;
    Node target = 2;
    Time sent = 3;
    bytes payload = 15;
}

// EchoReply is used to echo a message containing the actual receiver node as
// well as the received timestamp and a payload containing the original echo.
message EchoReply {
    Node receiver = 1;
    Time received = 2;
    EchoRequest echo = 3;
}

// Echo is the service definition for nodes participating in echoing.
service Echo {

    // Bounce allows nodes to respond to echo requests with echo replies.
    rpc Bounce (EchoRequest) returns (EchoReply) {}

}
